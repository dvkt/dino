DATA:
source.file         is text
source.code         is text
source.length       is number
source.lines        is text vector
source.lines.length is number

reader.ci   is number # current character index 
reader.char is text   # current character
reader.tok  is text   # current token 
reader.line is text   # current line 

line.tokens        is text vector
line.tokens.length is number

lines is text vector
lines.length is number 

eval.state   is number # 0 = data, 1 = procedure
eval.lineno  is number
eval.line    is text

error.msg is text

PROCEDURE:
sub-procedure error
    if error.msg is equal to "" then 
        store "Malformed statement" in error.msg
    end if 
    display "\e[1;31mLDPL Error: " error.msg " (\e[0m" source.file ":" eval.lineno "\e[1;31m)\e[0m" crlf
    store "" in error.msg
end sub-procedure

sub-procedure eval.line
    if line.tokens:0 is equal to "DATA:" then
        if line.tokens.length is greater than 1 then 
            call error 
        end if 
        store 0 in eval.state 
    else if line.tokens:0 is equal to "PROCEDURE:" then 
        if line.tokens.length is greater than 1 then 
            call error 
        end if 
        store 1 in eval.state 
    else if line.tokens:0 is equal to "DISPLAY" then 
        display "display" crlf
    else
        in error.msg join "Unknown statement: " eval.line
        call error 
    end if
end sub-procedure

sub-procedure main   
    store argv:0 in source.file
    load file argv:0 in source.code
    store length of source.code in source.length
    while reader.ci is less than source.length do 
        get character at reader.ci from source.code in reader.char
        if reader.char is equal to "\n" then 
            # first line is line 1 
            add 1 and eval.lineno in eval.lineno

            # skip empty lines
            if reader.tok is equal to "" then 
                add 1 and reader.ci in reader.ci
                continue 
            end if

            # store current token in tokens vector
            store reader.tok in line.tokens:line.tokens.length
            add 1 and line.tokens.length in line.tokens.length
            store "" in reader.tok
            
            # store line in lines vector
            store reader.line in source.lines:source.lines.length
            add 1 and source.lines.length in source.lines.length

            # eval line
            store reader.line in eval.line 
            call eval.line

            # reset line
            store "" in reader.line
            store 0 in line.tokens.length
        else if reader.char is equal to " " then 
            # store space in line
            join reader.line and reader.char in reader.line

            # store current token in tokens vector
            store reader.tok in line.tokens:line.tokens.length
            add 1 and line.tokens.length in line.tokens.length
            store "" in reader.tok
        else 
            # upcase letter
            store reader.char in upcase.letter
            call upcase-letter 
            store upcase.letter in reader.char 

            # store char in current token 
            join reader.tok and reader.char in reader.tok

            # store char in current line
            join reader.line and reader.char in reader.line
        end if 

        # increment reader counter
        add 1 and reader.ci in reader.ci
    repeat
end sub-procedure

call main
