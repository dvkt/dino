# TODO:

# - [ ] Scan for line break
# - [ ] Tokenize line
# - [ ] Switch on first token in line
# - [ ] call sub-procedure for line

DATA:
source.code   is text
source.length is number

reader.c is number # current character index 

lines is text vector
lines.length is number 

PROCEDURE:
display "ok" crlf

store argv:0 in source.name
load file argv:0 in source.text
store length of source.text in source.size

# Algorithm:
#   go through each character
#   if it's normal, add it to the current line and current token
#   if it's a space, end the current token
#   if it's a newline, end the current line and token
# When line ends:
#   switch on first token
# If display:
#   eval tokens -> values
#   print
# If store:
#   eval token
#   store value in one of 4 variable vectors (t,n,tv,nv)
# if store length of:
#   dew it...

store length of source.code in source.length
while reader.c is less than source.length
    
    add 1 and reader.c in reader.c
repeat



display "lines: " source.line-count crlf 
display "tokens: " tokenc crlf