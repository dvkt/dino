#                                  .
#                               &*****
#     dino:                   (********@
#      ~ an ~                 ***/
#       ~ LDPL ~             @***
#        ~ interpreter ~     &@
#         ~ in ~            %**%%
#          ~ LDPL ~         &**((
#                        %%******
#                (( ((&**********
#          (@********************
#         /**********************
#        ***********************,.&
#       ***********************######
#     (*** ****/**************@#%####,
#   @**&   **** ****.****.****#######(

# === DINO ===========================================================
# The `dino` command line program, given a file of LDPL source code,
# runs the code.
#
# Functions:
#   $ help
#   $ repl
#   $ run file.ldpl
#   $ asm file.ldpl -> file.dino
#   $ bytes file.dino -> file.dinocode
#   $ bytes file.ldpl -> file.dinocode
#   $ disas file.dinocode -> file.dino

DATA:

main.input is text

PROCEDURE:

# --- DISPLAY HELP ---------------------------------------------------
# $ dino help
sub-procedure main.help
    display "Usage: $ dino [command] [options...]" crlf
    display crlf
    display "Commands:" crlf
    display "\t" "run  " "\t" "execute .ldpl file" crlf
    display "\t" "compile" "\t" "compile .ldpl program to .dinocode" crlf
    display "\t" "asm  " "\t" "compile .ldpl file to .dino assembly" crlf
    display "\t" "bytes" "\t" "compile .dino file to .dinocode bytecode" crlf
    display "\t" "disas" "\t" "decompile .dinocode file to .dino assembly" crlf
    display "\t" "help " "\t" "print help screen" crlf
end sub-procedure

# --- READ-EVAL-PRINT-LOOP -------------------------------------------
# $ dino run file.ldpl
# The REPL reads, evaluates, and prints LDPL source code in a loop.
sub-procedure main.repl
end sub-procedure

# --- RUN FILE -------------------------------------------------------
# $ dino run file.dinocode
sub-procedure main.run.dinocode
    load file argv:1 in loader.input
    if ERRORCODE is greater than 0 then
        display errortext crlf
        exit
    end if
    call loader.input.load
    call vm.run
end sub-procedure

# --- CONVERT LDPL TO ASSEMBLY ---------------------------------------
# $ dino asm file.ldpl
sub-procedure main.ldpl-to-asm
end sub-procedure

# --- CONVERT LDPL TO BYTECODE ---------------------------------------
# $ dino bytes file.ldpl
sub-procedure main.ldpl-to-bytecode
end sub-procedure

# --- CONVERT ASSEMBLY TO BYTECODE -----------------------------------
# $ dino bytes file.dino
sub-procedure main.asm-to-bytecode
    load file argv:1 in c.asm
    if ERRORCODE is greater than 0 then
        display ERRORTEXT crlf
        exit
    end if
    call asm.compile
    call c.bytes.print
end sub-procedure

# --- CONVERT BYTECODE TO ASSEMBLY -----------------------------------
# $ dino disas file.dinocode
sub-procedure main.bytecode-to-asm
end sub-procedure

# --- MAIN PROGRAM ROUTINE -------------------------------------------
sub-procedure main
    if argv:0 is equal to "bytes" then
        call main.asm-to-bytecode
    else if argv:0 is equal to "run" then
        call main.run.dinocode
    else
        call main.help
    end if
end sub-procedure

call main

#              boing         boing         boing
#    e-e           . - .         . - .         . - .
#   (\_/)\       '       `.   ,'       `.   ,'       .
#    `-'\ `--.___,         . .           . .          .
#       '\( ,_.-'
#          \\               "             "            a:f
#          ^'