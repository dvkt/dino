# === LOADER =========================================================
# The loader turns a text file of bytecode into a number vector of bytecode.

DATA:
# IN:
loader.input    is text # bytecode in .dinocode text format

# LOCALS:
loader.i        is number
loader.len      is number
loader.char     is text
loader.prev     is text
loader.token    is text
loader.string?  is number

PROCEDURE:
#  IN: loader.input
# OUT: vm.bytecode
#      vm.bytecode.len
#      vm.constants
#      vm.constants.len
sub-procedure loader.input.load
    store length of loader.input in loader.len
    store 0 in loader.i
    store 0 in loader.string?
    store "" in loader.token
    while loader.i is less than loader.len do
        store loader.char in loader.prev
        get character at loader.i from loader.input in loader.char

        if loader.string? is equal to 1 then
            join loader.token and loader.char in loader.token
            add 1 and loader.i in loader.i
            if loader.char is equal to "\"" then
                if loader.prev is not equal to "\\" then
                    store 0 in loader.string?
                    store loader.token in vm.constants:vm.constants.len
                    store vm.constants.len in vm.bytecode:vm.bytecode.len
                    add 1 and vm.bytecode.len in vm.bytecode.len
                    add 1 and vm.constants.len in vm.constants.len
                    store "" in loader.token
                end if
            end if
            continue
        end if

        if loader.char is equal to " " then
            store loader.token in vm.bytecode:vm.bytecode.len
            add 1 and vm.bytecode.len in vm.bytecode.len
            store "" in loader.token
        else if loader.char is equal to "\"" then
            store 1 in loader.string?
        else
            join loader.token and loader.char in loader.token
        end if
        add 1 and loader.i in loader.i
    repeat
end sub-procedure