            *  *__* _*  *  * _*  *__*_ *__*  *
            * |   \(_)_ _  __\ \ / /  \/  |  *
            * | |) | | ' \/ _ \ V /| |\/| |  *
            * |___/|_|_||_\___/\_/ |_|  |_|  *
            *  *  *  *  *  *  *  *  *  *  *  *
                       An LDPL VM
                       Written in
                          LDPL

=== SUMMARY ==========================================================

* Bytecode VM
* 64 bit words
* 0xFFFF words of memory
* 16 registers (A, X, Y, Z, C, E, SP, PC, TA, TX, TY, TZ, TE)
* Registers, variables, and constants share memory space.
* Instructions are 1-4 words: One opcode and 0-3 operands.

=== TODO =============================================================

* [x] assembly -> bytecode $ dino bytes examples/99.dino
   * [x] strip comments
   * [x] trim line
   * [x] tokenize file
   * [x] support strings
   * [-] :newline: token  (don't need)
   * [x] accept file from command line
   * [x] tokens -> bytecode
   * [x] print raw bytecode
   * [ ] save bytecode to file
* [ ] bytecode -> assembly
   * [ ] load bytecode from file
* [ ] VM
   * [ ] load bytecode from file
   * [ ] run bytecode
   * [ ] Instructions:
      * [ ] JUMP
      * [ ] JIF
      * [ ] JIT
      * [ ] CALL
      * [ ] RETURN
      * [ ] EXIT
      * [ ] WAIT
      * [ ] STORE
      * [ ] STORN
      * [ ] EQ
      * [ ] GT
      * [ ] LT
      * [ ] ADD
      * [ ] SUB
      * [ ] MUL
      * [ ] DIV
      * [ ] MOD
      * [ ] ABS
      * [ ] CEIL
      * [ ] FLOOR
      * [ ] RANDOM
      * [ ] PRINT
      * [ ] ACCEPT
      * [ ] EXEC
      * [ ] READ
      * [ ] WRITE
      * [ ] APPEND
      * [ ] LEN
      * [ ] JOIN
      * [ ] GETC
      * [ ] GETCC
      * [ ] PUTC

=== REFERENCE ========================================================

# --- BYTECODE FORMAT ------------------------------------------------
| BYTE | DATA | DESCRIPTION
+------+------+------------------------------------------------------
| 0000 |  76  | First four bytes are char codes for "LDPL"
| 0001 |  68  |
| 0002 |  80  |
| 0003 |  76  |
| 0004 |  01  | Bytecode version number
| 0005 |  07  | Address of first instruction. JUMP to it.
| 0006 |      | Text constants
| 0007 |      | Program instructions
| 0008 |  06  | Final EXIT
| 0009 |      | Sub-procedure definitions

# --- MEMORY LAYOUT --------------------------------------------------
| NUM  | NAME | TYPE | DESCRIPTION
+------+------+------+------------------------------------------------
| ==== | ==== | ==== | REGISTERS =====================================
| 0000 | A    | NUM  | Accumulator
| 0001 | X    | NUM  | Parameter
| 0002 | Y    | NUM  | Parameter
| 0003 | Z    | NUM  | $a = 0?
| 0004 | E    | NUM  | Non-zero error code
| 0005 | C    | NUM  | Carry
| 0006 |      |      | Reserved
| 0007 |      |      | Reserved
| 0008 | SP   | NUM  | Stack pointer
| 0009 | PC   | NUM  | Program counter
| 000A | TA   | TEXT | Text accumulator
| 000B | TX   | TEXT | Parameter
| 000C | TY   | TEXT | Parameter
| 000D | TZ   | TEXT | Is TA empty?
| 000E | TE   | TEXT | Error message
| 000F |      |      | Reserved
| ==== | ==== | ==== | VARIABLES ====================================
| 1000 |      | NUM  | Number variables
| 2000 |      | TEXT | Text variables
| ==== | ==== | ==== | CONSTANTS ====================================
| 3000 |      | TEXT | Text literals
| ...  |      |      |
| FFFF |      |      | Max address

# --- ADDRESS SYNTAX -------------------------------------------------
| NAME            | SYNTAX
+-----------------+---------------------------------------------------
| Register Name   | $z, $TA
| Variable Name   | %bufsize, %Users
| Label           | print-fn, DISPLAY

# --- INSTRUCTIONS ---------------------------------------------------
| CODE | NAME              | DESCRIPTION
+------+-------------------+------------------------------------------
|  00  | n/a               | n/a
| ==== | ================= | CONTROL FLOW ============================
|  01  | JUMP label        | Jump to location of label
|  02  | JIF label         | Jump to label if $a is 0 (false)
|  03  | JIT label         | Jump to label if $a is 1 (true)
|  04  | CALL label        | Push location on stack and jump to label
|  05  | RETURN            | Pop loc off top of stack and jump to it
|  06  | EXIT              | Exit program
|  07  | WAIT $r           | Pause for milliseconds in register.
| ==== | ================= | MEMORY COMMANDS =========================
|  10  | STORE %var $r     | Store value of register r in variable var.
|  11  | SET $r 3.14       | Set $r to literal number value.
| ==== | ================= | ARITHMETIC ==============================
|  20  | EQ $x $y $a       | Set $a=1 if $x == $y
|  21  | GT $x $y $a       | Set $a=1 if $x > $y
|  22  | LT $x $y $a       | Set $a=1 if $x < $y
|  23  | ADD $x $y $a      | Put sum of registers $x and $y in $a
|  24  | SUB $x $y $a      | Subtract value of $y from $x and put in $a.
|  25  | MUL $x $y $a      | Multiplication
|  26  | DIV $x $y $a      | Division. $e will be set to 1 if $y is 0.
|  27  | MOD $x $y $a      | Modulo
|  28  | ABS $x $a         | Put absolute value of register $x in $a
|  29  | CEIL $x $a        | Ceiling
|  2A  | FLOOR $x $a       | Flooring
|  2B  | RANDOM $a         | Put random number in $a.
| ==== | ================= | I/O COMMANDS ============================
|  30  | DISPLAY $r        | Print content of register $r
|  31  | ACCEPT $a         |
|  32  | EXEC $ta          |
|  33  | READ $ta $tz      |
|  34  | WRITE $ta $tb     |
|  35  | APPEND $ta $tb    |
| ==== | ================  | TEXT OPERATIONS ========================
|  40  | LEN $tx $a        | Get length of string in $tx.
|  41  | JOIN $tx $ty $ta  | Concatenate text in registers into $ta.
|  42  | GETC n %str $ta   | Get character at position n in %str.
|  43  | GETCC n %str $a   | Get character code at n in %str.
|  44  | PUTC $tr n        | Put ascii character with code n into $tr.
