# === CODE GENERATOR =================================================
# The generator will eventually use the AT in c.Nodes to produce ASM.
# For now, it loops through c.Tokens and emits DinoASM directly. ðŸ¤·

DATA:
# generator.Run
gen.run.c is number
gen.token is text

# gen.peek
gen.peek is text
gen.peek.i is number

# gen.operand.emit
gen.emit.char is text
gen.operand.type is number


PROCEDURE:
# Emit an operand.
# IN: gen.token
sub-procedure gen.operand.emit
    get character at 0 from gen.token in gen.emit.char

    # text
    if gen.emit.char is equal to "\"" then
        display gen.token
        return
    end if

    # number
    if gen.emit.char is equal to "-" then
        get character at 1 from gen.token in gen.emit.char
    end if
    store gen.emit.char in digit?.in
    call digit?
    if digit? is equal to 1 then
        display gen.token
        exit
    end if

    # variables
    store c.Vars:gen.token in gen.operand.type
    if gen.operand.type is equal to 1 then
        display "@" gen.token
    else if gen.operand.type is equal to 2 then
        display "%" gen.token
    else if gen.operand.type is equal to 3 then
        display "UNIMPLEMENTED: number vector"
        exit
    else if gen.operand.type is equal to 4 then
        display "UNIMPLEMENTED: text vector"
        exit
    else
        display "bad operand type: " gen.operand.type " for " gen.token crlf
        exit
    end if

    # number variable
end sub-procedure

# Store the next token in gen.token
# IN: gen.run.c
sub-procedure gen.advance
    incr gen.run.c
    store c.Tokens:gen.run.c in gen.token
end sub-procedure

# Store the next token in gen.peek without advancing
# IN: gen.run.c
sub-procedure gen.peek
    add gen.run.c and 1 in gen.peek.i
    store c.Tokens:gen.peek.i in gen.peek
end sub-procedure

# IN: c.Tokens
sub-procedure generator.Run
    store 0 in gen.run.c
    while gen.run.c is less than c.Tokens* do
        store c.Tokens:gen.run.c in gen.token

        if tokens.NEWLINE is equal to gen.token then
            # ignore newlines
        else if tokens.STORE is equal to gen.token then
            display $NAMES:$CODES:tokens.STORE " "
            call gen.peek
            while gen.peek is not equal to tokens.NEWLINE do
                if gen.peek is equal to "" then
                    break
                end if
                call gen.advance
                call gen.operand.emit
                call gen.peek
            repeat
        else if tokens.DISPLAY is equal to gen.token then
            display $NAMES:$CODES:tokens.DISPLAY
            call gen.advance
        else
            # ?
        end if

        incr gen.run.c
    repeat
end sub-procedure
