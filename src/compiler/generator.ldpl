# === CODE GENERATOR =================================================
# The generator loops through c.Nodes and emits assembly for each.
# By "emit", we mean it puts it into c.Asm.

DATA:
# shared
gen.key is text

# generator.Run
gen.node is number
gen.node.type is text

# gen.operand.emit
gen.operand is number
gen.operand.type is number
gen.operand.value is text
gen.emit.char is text

# generator.Run
gen.run.sep is text

PROCEDURE:
# Emit operand 0 1 2 etc for current node based on `gen.operand`
# IN: gen.operand.num
#     gen.node
#     c.Nodes
sub-procedure gen.operand.emit
    in gen.key join gen.node ":" gen.operand
    store c.Nodes:gen.key in gen.operand.value
    in gen.key join gen.key ":type"
    store c.Nodes:gen.key in gen.operand.type

    if gen.operand.type is equal to 1 then
        display "%" gen.operand.value
    else if gen.operand.type is equal to 2 then
        display "@" gen.operand.value
    else if gen.operand.type is equal to 3 then
        display "UNIMPLEMENTED: number vector"
        exit
    else if gen.operand.type is equal to 4 then
        display "UNIMPLEMENTED: text vector"
        exit
    else if gen.operand.type is equal to 5 then
        display gen.operand.value
    else if gen.operand.type is equal to 6 then
        display gen.operand.value
    else
        display "bad operand type: " gen.operand.type " for " gen.operand.value crlf
        exit
    end if

    # number variable
end sub-procedure

# emit
sub-procedure gen.operand.emit0
    store 0 in gen.operand
    call gen.operand.emit
end sub-procedure
sub-procedure gen.operand.emit1
    store 1 in gen.operand
    call gen.operand.emit
end sub-procedure
sub-procedure gen.operand.emit2
    store 2 in gen.operand
    call gen.operand.emit
end sub-procedure

# IN: c.Nodes
sub-procedure generator.Run
    store "" in c.Asm
    store 0 in gen.node
    while gen.node is less than c.Nodes* do
        store c.Nodes:gen.node in gen.node.type

        if nodes.STORE is equal to gen.node.type then
            display "STORE" " "
            call gen.operand.emit1
            display ", "
            call gen.operand.emit0
        else if nodes.DISPLAY is equal to gen.node.type then
            store 0 in gen.operand
            while 0 is less than 1 do
                in gen.key join gen.node ":" gen.operand ":type"
                store c.Nodes:gen.key in gen.operand.type
                if gen.operand.type is equal to 0 then
                    break
                end if
                if gen.operand is greater than 0 then
                    display crlf
                end if
                display "PRINT "
                call gen.operand.emit
                incr gen.operand
            repeat
        else if nodes.ADD is equal to gen.node.type then
            display "ADD "
            call gen.operand.emit0
            display ", "
            call gen.operand.emit1
            display ", "
            call gen.operand.emit2
        else
            display "? " gen.node.type
        end if

        incr gen.node
        if gen.node is less than c.Nodes* then
            display crlf
        end if
    repeat
end sub-procedure
