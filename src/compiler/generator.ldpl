# === CODE GENERATOR =================================================
# The generator loops through c.Nodes and emits assembly for each.
# By "emit", we mean it puts it into c.Asm.

DATA:
# shared
gen.token is text
gen.key is text

# generator.Run
gen.node is number
gen.node.type is number
gen.run.n is number
gen.run.type is number

# gen.operand.emit
gen.operand is number
gen.operand.type is number
gen.emit.char is text

PROCEDURE:
# Emit operand 0 1 2 etc for current node based on `gen.operand`
# IN: gen.operand.num
#     gen.node
#     c.Nodes
sub-procedure gen.operand.emit
    in gen.key join gen.node ":" gen.operand
    store c.Nodes:gen.key in gen.operand.type

    if gen.operand.type is equal to 1 then
        display "@" gen.token
    else if gen.operand.type is equal to 2 then
        display "%" gen.token
    else if gen.operand.type is equal to 3 then
        display "UNIMPLEMENTED: number vector"
        exit
    else if gen.operand.type is equal to 4 then
        display "UNIMPLEMENTED: text vector"
        exit
    else
        display "bad operand type: " gen.operand.type " for " gen.token crlf
        exit
    end if

    # number variable
end sub-procedure

# emit and advance
sub-procedure gen.operand.emit0
    store 0 in gen.operand
    call gen.operand.emit
end sub-procedure

# IN: c.Nodes
sub-procedure generator.Run
    store "" in c.Asm
    store 0 in gen.node
    while gen.node is less than c.Nodes* do
        store c.Nodes:gen.node in gen.node.type

        if nodes.STORE is equal to gen.node.type then
            in c.Asm join c.Asm "STORE" " "
            call gen.operand.emit0
        else if nodes.DISPLAY is equal to gen.node.type then
            in c.Asm join c.Asm "PRINT" " "
            store 0 in gen.operand
            while 0 is less than 1 do
                in gen.key join gen.node ":" gen.run.n
                store c.Nodes:gen.key in gen.operand.type
                if gen.operand.type is equal to 0 then
                    break
                end if
                call gen.operand.emit
                incr gen.operand
            repeat
        else
            # ?
        end if

        incr gen.node
    repeat
end sub-procedure
