# === ASSEMBLER ======================================================
# The assembler converts text assembly code into dino bytecode.
DATA:
# OUT:
asm.dinocode      is text

# INTERNALS:
asm.error         is text
asm.labels        is number vector
asm.tokens        is text vector
asm.tokens.len    is number
asm.token         is text
asm.token.label?  is number
asm.label         is text
asm.address       is number
asm.pc            is number  # program counter
asm.addresses     is number vector
asm.chars         is text vector # character cache for lexing asm

asm.vars          is number vector
asm.vars.len      is number
asm.tvars         is number vector
asm.tvars.next    is number

asm.segment.head  is text
asm.segment.code  is text
asm.segment.text  is text

# LOCALS:
asm.len           is number
asm.i             is number
asm.x             is number
asm.t             is text
asm.size          is number
asm.char          is text
asm.prev          is text
asm.comment?      is number
asm.string?       is number

PROCEDURE:
store $A  in asm.addresses:"$A"
store $X  in asm.addresses:"$X"
store $Y  in asm.addresses:"$Y"
store $Z  in asm.addresses:"$Z"
store $C  in asm.addresses:"$C"
store $E  in asm.addresses:"$E"
store $I  in asm.addresses:"$I"
store $T  in asm.addresses:"$T"
store $SP in asm.addresses:"$SP"
store $PC in asm.addresses:"$PC"
store $AC in asm.addresses:"$AC"
store @A  in asm.addresses:"@A"
store @X  in asm.addresses:"@X"
store @Y  in asm.addresses:"@Y"
store @T  in asm.addresses:"@T"
store @E  in asm.addresses:"@E"


store 0 in asm.i
while asm.i is less than 16 do
    join "@ARG" and asm.i in asm.t
    add $OFFSET.ARGV and asm.i in asm.addresses:asm.t
    incr asm.i
repeat

store $OFFSET.VARS in asm.vars.len
store $OFFSET.TVAR in asm.tvars.next
store $OFFSET.TLIT in c.text.len

#  IN: asm.error
sub-procedure asm.error
    display "\e[1;31mASM ERROR \e[0;1m(" asm.pc "): \e[0m"
    display asm.error crlf
    exit
end sub-procedure

#  IN: asm.token
# OUT: asm.token.label?
sub-procedure asm.token.label?
    store length of asm.token in asm.x
    subtract 1 from asm.x in asm.x
    get character at asm.x from asm.token in asm.char
    store 0 in asm.token.label?
    if asm.char is equal to ":" then
        store 1 in asm.token.label?
    end if
end sub-procedure

#  IN: asm.token
# OUT: asm.token
sub-procedure asm.token.strip-trailing-colon
    store length of asm.token in asm.len
    subtract 1 from asm.len in asm.len
    store 0 in asm.x
    store "" in asm.t
    while asm.x is less than asm.len do
        get character at asm.x from asm.token in asm.char
        join asm.t and asm.char in asm.t
        add 1 and asm.x in asm.x
    repeat
    store asm.t in asm.token
end sub-procedure

# Convert tokens of ASM source code to memory address.
#  IN: asm.token
# OUT: asm.address
sub-procedure asm.token.to-address
    get character at 0 from asm.token in asm.char
    if asm.char is equal to "\"" then
        # text literal
        store asm.token in c.text:c.text.len
        store c.text.len in asm.address
        add 1 and c.text.len in c.text.len
    else if asm.char is equal to "$" then
        # register
        store asm.addresses:asm.token in asm.address
    else if asm.char is equal to "@" then
        # text variable
        if asm.addresses:asm.token is not equal to 0 then
            store asm.addresses:asm.token in asm.address
        else if asm.tvars:asm.token is equal to 0 then
            store asm.tvars.next in asm.tvars:asm.token
            add 1 and asm.tvars.next in asm.tvars.next
            store asm.tvars:asm.token in asm.address
        else
            store asm.tvars:asm.token in asm.address
        end if
    else if asm.char is equal to "%" then
        # number variable
        if asm.vars:asm.token is equal to 0 then
            add 1 and asm.vars.len in asm.vars.len
            store asm.vars.len in asm.vars:asm.token
        end if
        store asm.vars:asm.token in asm.address
    else
        # number or label
        # check for negative number
        if asm.char is equal to "-" then
            get character at 1 from asm.token in asm.char
        end if
        # number vs label
        store asm.char in digit?.in
        call digit?
        if digit? is equal to 1 then
            store asm.token in asm.address
        else
            store asm.labels:asm.token in asm.address
            subtract asm.pc from asm.address in asm.address
        end if
    end if
end sub-procedure

#  IN: asm.tokens
#      asm.tokens.len
# OUT: asm.labels
sub-procedure asm.tokens.find-labels
    store 0 in asm.pc
    while asm.pc is less than asm.tokens.len do
        store asm.tokens:asm.pc in asm.token
        call asm.token.label?
        if asm.token.label? is equal to 1 then
            call asm.token.strip-trailing-colon
            store asm.pc in asm.labels:asm.token
        end if
        add 1 and asm.pc in asm.pc
    repeat
end sub-procedure

# Converts text tokens to bytecode and text.
#  IN: asm.tokens
#      asm.tokens.len
# OUT: c.bytes
#      c.bytes.len
#      c.text
#      c.text.len
sub-procedure asm.tokens.to-bytecode
    call asm.tokens.find-labels
    store 0 in asm.pc
    while asm.pc is less than asm.tokens.len do
        store asm.tokens:asm.pc in asm.token
        if $CODES:asm.token is greater than 0 then
            store $CODES:asm.token in c.bytes:c.bytes.len
            add 1 and c.bytes.len in c.bytes.len
            store $SIZES:$CODES:asm.token in asm.size
            if asm.size is greater than 0 then
                add 1 and asm.pc in asm.pc
                add asm.size and asm.pc in asm.size
                while asm.pc is less than asm.size do
                    store asm.tokens:asm.pc in asm.token
                    call asm.token.to-address
                    store asm.address in c.bytes:c.bytes.len
                    add 1 and c.bytes.len in c.bytes.len
                    add 1 and asm.pc in asm.pc
                repeat
                continue
            end if
        else
            store length of asm.token in asm.x
            subtract 1 from asm.x in asm.x
            get character at asm.x from asm.token in asm.char

            if asm.char is equal to ":" then
                # label
                store 0 in c.bytes:c.bytes.len
                add 1 and c.bytes.len in c.bytes.len
            else
                # number literals
                store asm.token in digit?.in
                call digit?
                if digit? is equal to 1 then
                    store asm.token in c.bytes:c.bytes.len
                    add 1 and c.bytes.len in c.bytes.len
                else
                    join "bad token: " and asm.token in asm.error
                    call asm.error
                end if
            end if
        end if

        add 1 and asm.pc in asm.pc
    repeat
end sub-procedure

# Converts a text of ASM source code to a text vector of tokens.
# Ignores comments and commas, upcases non-string tokens, strips
# extra whitespace, and supports strings with escaping.
#  IN: c.asm
# OUT: asm.tokens
#      asm.tokens.len
sub-procedure c.input.to-tokens
    store length of c.asm in asm.len
    store 0 in asm.pc
    store 0 in asm.comment?
    store 0 in asm.string?
    store "" in asm.char
    store "" in asm.token
    store "" in asm.prev
    split c.asm by "" in asm.chars

    while asm.pc is less than asm.len do
        store asm.char in asm.prev
        store asm.chars:asm.pc in asm.char

        if asm.string? is equal to 1 then
            if asm.char is equal to "\"" then
                if asm.prev is equal to "\\" then
                    # quoted string
                    join asm.token and asm.char in asm.token
                else
                    # not quoted, end string token
                    join asm.token and asm.char in asm.token
                    store asm.token in asm.tokens:asm.tokens.len
                    add 1 and asm.tokens.len in asm.tokens.len
                    store "" in asm.token
                    store 0 in asm.string?
                end if
            else
                # not a quote, add to token
                join asm.token and asm.char in asm.token
            end if
            add 1 and asm.pc in asm.pc
            continue
        end if

        # treat commas as spaces
        if asm.char is equal to "," then
            store " " in asm.char
        end if

        if asm.char is equal to "\n" then
            # save token
            if asm.token is not equal to "" then
                store asm.token in asm.tokens:asm.tokens.len
                add 1 and asm.tokens.len in asm.tokens.len
                store "" in asm.token
            end if
            store 0 in asm.comment?
        else if asm.char is equal to "\"" then
            # parse string
            store 1 in asm.string?
            store "\"" in asm.token
        else if asm.char is equal to ";" then
            # ignore comments
            store 1 in asm.comment?
        else if asm.char is equal to " " then
            # squash spaces
            if asm.prev is not equal to " " then
                if asm.prev is not equal to "\n" then
                    # save token
                    if asm.token is not equal to "" then
                        store asm.token in asm.tokens:asm.tokens.len
                        add 1 and asm.tokens.len in asm.tokens.len
                        store "" in asm.token
                    end if
                end if
            end if
        else if asm.comment? is equal to 0 then
            # all tokens are UPPER case
            store asm.char in upcase.letter
            call upcase-letter
            store upcase.letter in asm.char
            # add char to token
            join asm.token and asm.char in asm.token
        end if
        add 1 and asm.pc in asm.pc
    repeat
end sub-procedure

#  IN: c.asm
# OUT: c.bytes
#      c.bytes.len
sub-procedure asm.compile
    call c.input.to-tokens
    call asm.tokens.to-bytecode
end sub-procedure

#  IN: c.asm
# OUT: asm.dinocode
sub-procedure asm.to-dinocode
    # L D P L char codes, version #
    store 0 in asm.i
    store "" in asm.segment.head
    while asm.i is less than $HEADER.len do
        in asm.segment.head join asm.segment.head $HEADER:asm.i " "
        incr asm.i
    repeat

    store 0 in asm.pc
    store "" in asm.segment.code
    while asm.pc is less than c.bytes.len do
        store c.bytes:asm.pc in asm.x
        if asm.x is less than 10 then
            if asm.x is greater than or equal to 0 then
                join asm.segment.code and "0" in asm.segment.code
            end if
        end if
        in asm.segment.code join asm.segment.code asm.x " "
        add 1 and asm.pc in asm.pc
    repeat

    # assemble text
    store "" in asm.segment.text
    store $OFFSET.TLIT in asm.x
    while asm.x is less than c.text.len do
        in asm.segment.text join asm.segment.text c.text:asm.x " "
        add 1 and asm.x in asm.x
    repeat

    in asm.dinocode join asm.segment.head asm.segment.code asm.segment.text
end sub-procedure

# Must be called after asm.compile.
#  IN: c.text
sub-procedure asm.print
    call asm.to-dinocode
    display asm.dinocode crlf
end sub-procedure
