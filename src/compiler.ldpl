# === COMPILER =======================================================
DATA:
# Input -> {Lexer}
c.Input         is text           # LDPL source code

# Input -> {Lexer} -> Tokens
c.Tokens        is text vector    # source code as tokens
c.Tokens*       is number

# Tokens -> {Parser} -> Nodes & Vars
c.Nodes         is text vector    # code
c.Nodes*        is number
c.Vars          is text vector    # Vars is two vectors: name -> type OR num -> name
c.Vars*         is number         # var types:1=n,2=t,3=nv,4=tv

# Nodes -> {Generator} -> Assembly
c.Asm           is text           # assembly source code

# Asm -> {Assembler} -> Bytecode
c.Bytes         is number vector   # instructions
c.Bytes*        is number
c.Text          is text vector     # text literals
c.Text*         is number

# TOKENS:
tokens.NEWLINE  is text            # newline token
tokens.IS       is text            # `is` token
tokens.IN       is text            # `is` token
tokens.VECTOR   is text            # ...you get it
tokens.AND      is text
tokens.NUMBER   is text
tokens.TEXT     is text
tokens.CRLF     is text
tokens.STORE    is text
tokens.DISPLAY  is text

# AST NODES:
nodes.NUMBER    is number  # 3.14
nodes.TEXT      is number  # "Hiya"
nodes.NUMVAR    is number  # i
nodes.TEXTVAR   is number  # name
nodes.NUMVEC    is number  # list
nodes.TEXTVEC   is number  # groceries
nodes.IF        is number
nodes.STORE     is number
nodes.DISPLAY   is number
nodes.x         is number

PROCEDURE:
# TODO: like opcodes
store ":NL:"    in tokens.NEWLINE
store "IS"      in tokens.IS
store "IN"      in tokens.IN
store "AND"     in tokens.AND
store "VECTOR"  in tokens.VECTOR
store "NUMBER"  in tokens.NUMBER
store "TEXT"    in tokens.TEXT
store "CRLF"    in tokens.CRLF
store "STORE"   in tokens.STORE
store "DISPLAY" in tokens.DISPLAY

store 1 in nodes.x
store nodes.x in nodes.NUMVAR
incr nodes.x
store nodes.x in nodes.TEXTVAR
incr nodes.x
store nodes.x in nodes.NUMVEC
incr nodes.x
store nodes.x in nodes.TEXTVEC
incr nodes.x
store nodes.x in nodes.NUMBER
incr nodes.x
store nodes.x in nodes.TEXT
incr nodes.x
store nodes.x in nodes.IF
incr nodes.x
store nodes.x in nodes.STORE
incr nodes.x
store nodes.x in nodes.DISPLAY
incr nodes.x
