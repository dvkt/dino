# === COMPILER =======================================================
DATA:
# Input -> {Lexer}
c.Input         is text           # LDPL source code

# Input -> {Lexer} -> Tokens
c.Tokens        is text vector    # source code as tokens
c.Tokens*       is number

# Tokens -> {Parser} -> Nodes & Vars
c.Nodes         is text vector    # code
c.Nodes*        is number
c.Vars          is text vector    # Vars is two vectors: name -> type OR num -> name
c.Vars*         is number         # var types:1=n,2=t,3=nv,4=tv

# Nodes -> {Generator} -> Assembly
c.Asm           is text           # assembly source code

# Asm -> {Assembler} -> Bytecode
c.Bytes         is number vector   # instructions
c.Bytes*        is number
c.Text          is text vector     # text literals
c.Text*         is number

# TOKENS:
tokens.NEWLINE  is text            # newline token
tokens.CRLF     is text

PROCEDURE:
# TODO: like opcodes
store ":NL:"    in tokens.NEWLINE
store "CRLF"    in tokens.CRLF

# setup argv & argc
store "ARGV" in c.Vars:$OFFSET.ARGV
store 4 in c.Vars:"ARGV"
store "ARGC" in c.Vars:$AC
store 1 in c.Vars:"ARGC"

# setup error codes
store "ERRORCODE" in c.Vars:$E
store 1 in c.Vars:"ERRORCODE"
store "ERRORTEXT" in c.Vars:@E
store 2 in c.Vars:"ERRORTEXT"