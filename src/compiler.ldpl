# === COMPILER =======================================================
DATA:
# Input -> {Lexer}
c.Input         is text           # LDPL source code

# Input -> {Lexer} -> Tokens
c.Tokens        is text vector    # source code as tokens
c.Tokens*       is number

# Tokens -> {Parser} -> Nodes & Vars
c.Nodes         is text vector    # code
c.Nodes*        is number
c.Vars          is text vector    # Vars is two vectors: name -> type OR num -> name
c.Vars*         is number         # var types:1=n,2=t,3=nv,4=tv

# Nodes -> {Generator} -> Assembly
c.Asm           is text           # assembly source code

# Asm -> {Assembler} -> Bytecode
c.Bytes         is number vector   # instructions
c.Bytes*        is number
c.Text          is text vector     # text literals
c.Text*         is number

# TOKENS:
tokens.NEWLINE  is text            # newline token
tokens.CRLF     is text

# AST NODES:
nodes.NUMBER    is text  # 3.14
nodes.TEXT      is text  # "Hiya"
nodes.NUMVAR    is text  # i
nodes.TEXTVAR   is text  # name
nodes.NUMVEC    is text  # list
nodes.TEXTVEC   is text  # groceries
nodes.IF        is text
nodes.STORE     is text
nodes.DISPLAY   is text
nodes.ADD       is text

PROCEDURE:
# TODO: like opcodes
store ":NL:"    in tokens.NEWLINE
store "CRLF"    in tokens.CRLF

store "NUMVAR" in nodes.NUMVAR
store "TEXTVAR" in nodes.TEXTVAR
store "NUMVEC" in nodes.NUMVEC
store "TEXTVEC" in nodes.TEXTVEC
store "NUMBER" in nodes.NUMBER
store "TEXT" in nodes.TEXT
store "IF" in nodes.IF
store "STORE" in nodes.STORE
store "DISPLAY" in nodes.DISPLAY
store "ADD" in nodes.ADD
