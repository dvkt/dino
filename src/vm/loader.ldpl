# === LOADER =========================================================
# The loader turns a text file of bytecode into a number vector
# of bytecode.

DATA:
# IN:
loader.input    is text # bytecode in .dinocode text format

# LOCALS:
loader.i        is number
loader*         is number
loader.char     is text
loader.prev     is text
loader.token    is text
loader.string?  is number
loader.chars    is text vector

PROCEDURE:
#  IN: loader.input
# OUT: vm.Code(*)
#      vm.Text(.next)
sub-procedure loader.run
    store $OFFSET.TLIT in vm.Text*
    store length of loader.input in loader*
    store 0 in loader.i
    store 0 in loader.string?
    store 0 in vm.Code*
    store "" in loader.token
    split loader.input by "" in loader.chars
    while loader.i is less than loader* do
        store loader.char in loader.prev
        store loader.chars:loader.i in loader.char

        if loader.string? is equal to 1 then
            add 1 and loader.i in loader.i
            if loader.char is equal to "\\" then
                get character at loader.i from loader.input in loader.char
                store loader.chars:loader.i in loader.char
                if loader.char is equal to "n" then
                    join loader.token and "\n" in loader.token
                else if loader.char is equal to "t" then
                    join loader.token and "\t" in loader.token
                else if loader.char is equal to "e" then
                    join loader.token and "\e" in loader.token
                else if loader.char is equal to "r" then
                    join loader.token and "\r" in loader.token
                else
                    display "bad escape char: " loader.char crlf
                    exit
                end if
                add 1 and loader.i in loader.i
                continue
            end if

            if loader.char is equal to "\"" then
                if loader.prev is not equal to "\\" then
                    store 0 in loader.string?
                    store loader.token in vm.Text:vm.Text*
                    add 1 and vm.Text* in vm.Text*
                    store "" in loader.token
                    continue
                end if
            end if
            join loader.token and loader.char in loader.token
            continue
        end if

        if loader.char is equal to " " then
            if loader.token is not equal to "" then
                store loader.token in vm.Code:vm.Code*
                add 1 and vm.Code* in vm.Code*
                store "" in loader.token
            end if
        else if loader.char is equal to "\"" then
            store 1 in loader.string?
        else
            join loader.token and loader.char in loader.token
        end if
        add 1 and loader.i in loader.i
    repeat
end sub-procedure