# === VIRTUAL MACHINE ================================================
DATA:
# instruction set version
vm.Version     is number

# text bytecode input for the loader
vm.Input       is text

# 8 numeric registers
vm.R           is number vector

# instructions
vm.Code        is number vector
vm.Code*       is number

# text literals & variables
vm.Text        is text vector
vm.Text*       is number

# tmp
__vm.i         is number
__vm.x         is number
__vm.boot      is number

PROCEDURE:
# vm must be booted (initalized) before it can run
sub-procedure vm.boot
    if __vm.boot is not equal to 0 then
        return
    end if

    # Set command line arguments on boot.
    if ARGC is greater than $MAX.ARGS then
        store $MAX.ARGS in ARGC
    end if
    store ARGC in vm.R:$AC
    store $OFFSET.ARGV in __vm.x
    store 0 in __vm.i
    while __vm.i is less than ARGC do
        store ARGV:__vm.i in vm.Text:__vm.x
        incr __vm.x
        incr __vm.i
    repeat

    store 1 in __vm.boot
end sub-procedure
