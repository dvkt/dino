# === VIRTUAL MACHINE ================================================
DATA:
# instruction set version
vm.Version     is number

# text bytecode input for the loader
vm.Input       is text

# 8 numeric registers & all num vars
vm.RAM         is number vector

# instructions
vm.Code        is number vector
vm.Code*       is number

# text literals & variables
vm.Text        is text vector
vm.Text*       is number

# internal - vectors
vm.vec.n       is number vector
vm.vec.t       is text vector
vm.vec.tmp     is text vector

# tmp
__vm.i         is number
__vm.x         is number
__vm.boot      is number
__vm.key       is text

PROCEDURE:
# vm must be booted (initalized) before it can run
sub-procedure vm.boot
    if __vm.boot is not equal to 0 then
        return
    end if

    # Set command line arguments on boot.
    if ARGC is greater than $MAX.ARGS then
        store $MAX.ARGS in ARGC
    end if
    store ARGC in vm.RAM:$AC
    store 0 in __vm.i
    display "ARGC: " ARGC crlf
    while __vm.i is less than ARGC do
        join $OFFSET.ARGV and __vm.i in __vm.key
        store ARGV:__vm.i in vm.vec.t:__vm.key
        incr __vm.i
    repeat

    store 1 in __vm.boot
end sub-procedure
